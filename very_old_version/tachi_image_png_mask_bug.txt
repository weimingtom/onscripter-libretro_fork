D:\work_ons\onscripter-en-20110628-src\onscripter-en-20110628-src\ONScripterLabel_image.cpp

SDL_Surface *ONScripterLabel::loadImage( char *filename, bool *has_alpha )
{
    if ( !filename ) return NULL;

    SDL_Surface *tmp = NULL;
    int location = BaseReader::ARCHIVE_TYPE_NONE;

    if (filename[0] == '>')
        tmp = createRectangleSurface(filename);
    else if (filename[0] != '*') // layers begin with *
        tmp = createSurfaceFromFile(filename, &location);
    if (tmp == NULL) return NULL;

    bool has_colorkey = false;
    Uint32 colorkey = 0;

    if ( has_alpha ){
        *has_alpha = (tmp->format->Amask != 0);
        if (!(*has_alpha) && (tmp->flags & SDL_SRCCOLORKEY)){
            has_colorkey = true;
            colorkey = tmp->format->colorkey;
            if (tmp->format->palette){
                //palette will be converted to RGBA, so don't do colorkey check
                has_colorkey = false;
            }
            *has_alpha = true;
        }
    }

    SDL_Surface *ret = SDL_ConvertSurface( tmp, image_surface->format, SDL_SWSURFACE );
    SDL_FreeSurface( tmp );

    //  A PNG image may contain an alpha channel, which complicates
    // handling loaded images when the ":a" alphablend tag is used,
    // since the standard method was to assume the right half of the image
    // contains an alpha data mask for the left half.
    //  The current default behavior is to use the PNG image's alpha
    // channel if available, and only process for an old-style mask
    // when no alpha channel was provided.
    // However, this could cause problems running older NScr games
    // which have PNG images containing old-style masks but also an
    // opaque alpha channel.
    //  Therefore, we provide a hack, set with the --detect-png-nscmask
    // command-line option, to auto-detect if a PNG image is likely to
    // have an old-style mask.  We assume that an old-style mask is intended
    // if the image either has no alpha channel, or the alpha channel it has
    // is completely opaque.  (Note that this used to be the default
    // behavior for onscripter-en.)
    //  Note that using the --force-png-nscmask option will always assume
    // old-style masks, while --force-png-alpha will produce the current
    // default behavior.
    if ((png_mask_type != PNG_MASK_USE_ALPHA) &&
        has_alpha && *has_alpha) {
        if (png_mask_type == PNG_MASK_USE_NSCRIPTER)
            *has_alpha = false;
        else if (png_mask_type == PNG_MASK_AUTODETECT) {
            SDL_LockSurface(ret);
            const Uint32 aval = *(Uint32*)ret->pixels & ret->format->Amask;
            if (aval != ret->format->Amask) goto breakalpha;
            *has_alpha = false;
            for (int y=0; y<ret->h; ++y) {
                Uint32* pixbuf = (Uint32*)((char*)ret->pixels + y * ret->pitch);
                for (int x=ret->w; x>0; --x, ++pixbuf) {
                    // Resolving ambiguity per Tatu's patch, 20081118.
                    // I note that this technically changes the meaning of the
                    // code, since != is higher-precedence than &, but this
                    // version is obviously what I intended when I wrote this.
                    // Has this been broken all along?  :/  -- Haeleth
                    if ((*pixbuf & ret->format->Amask) != aval) {
                        *has_alpha = true;
                        goto breakalpha;
                    }
                }
            }
          breakalpha:
            if (!*has_alpha && has_colorkey) {
                // has a colorkey, so run a match against rgb values
                const Uint32 aval = colorkey & ~(ret->format->Amask);
                if (aval == (*(Uint32*)ret->pixels & ~(ret->format->Amask)))
                    goto breakkey;
                *has_alpha = false;
                for (int y=0; y<ret->h; ++y) {
                    Uint32* pixbuf = (Uint32*)((char*)ret->pixels + y * ret->pitch);
                    for (int x=ret->w; x>0; --x, ++pixbuf) {
                        if ((*pixbuf & ~(ret->format->Amask)) == aval) {
                            *has_alpha = true;
                            goto breakkey;
                        }
                    }
                }
            }
          breakkey:
            SDL_UnlockSurface(ret);
        }
    }
    
    return ret;
}


------------


(D:\work_ons\onscripter-en-20080823-src\onscripter-en-20080823\ONScripterLabel.cpp)


    if ( ret &&
         screen_ratio2 != screen_ratio1 &&
         (!disable_rescale_flag || location == BaseReader::ARCHIVE_TYPE_NONE) )
    {
        SDL_Surface *src_s = ret;

        int w, h;
        if ( (w = src_s->w * screen_ratio1 / screen_ratio2) == 0 ) w = 1;
        if ( (h = src_s->h * screen_ratio1 / screen_ratio2) == 0 ) h = 1;
        SDL_PixelFormat *fmt = image_surface->format;
        ret = SDL_CreateRGBSurface( SDL_SWSURFACE, w, h,
                                    fmt->BitsPerPixel, fmt->Rmask, fmt->Gmask, fmt->Bmask, fmt->Amask );

        resizeSurface( src_s, ret );
        SDL_FreeSurface( src_s );
    }
    SDL_FreeSurface( tmp );

D:\work_ons\onscripter-en-20080823-src\onscripter-en-20080823\ONScripterLabel.cpp
begin here-->
	
#ifndef BPP16
    // Hack to detect when a PNG image is likely to have an old-style
    // mask.  We assume that an old-style mask is intended if the
    // image either has no alpha channel, or the alpha channel it has
    // is completely opaque.  This behaviour can be overridden with
    // the --force-png-alpha and --force-png-nscmask command-line
    // options.
    if (has_alpha && *has_alpha) {
	if (png_mask_type == PNG_MASK_USE_NSCRIPTER)
	    *has_alpha = false;
	else if (png_mask_type == PNG_MASK_AUTODETECT) {	
	    SDL_LockSurface(ret);
	    const Uint32 aval = *(Uint32*)ret->pixels & ret->format->Amask;
	    if (aval != 0xffUL << ret->format->Ashift) goto breakme;
	    *has_alpha = false;
	    for (int y=0; y<ret->h; ++y) {
		Uint32* pixbuf = (Uint32*)((char*)ret->pixels + y * ret->pitch);
		for (int x=0; x<ret->w; ++x, ++pixbuf) {
		    if (*pixbuf & ret->format->Amask != aval) {
			*has_alpha = true;
			goto breakme;
		    }
		}
	    }
	breakme:
	    SDL_UnlockSurface(ret);
	}
    }
#else
#warning "BPP16 defined: PNGs with NScripter-style masks will not work as expected"
#endif


	